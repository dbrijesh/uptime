function extract_run_id_from_log(tag, timestamp, record)
    local message = record["message"]
    local run_id = "unknown"
    
    if message then
        -- Look for the run_id pattern in JSON format
        -- Handle multiline, spaces, and indentation
        local json_pattern = '%{[^}]*"k"%s*:%s*"run_id"[^}]*"v"%s*:%s*"([^"]+)"[^}]*%}'
        local simple_pattern = '"k"%s*:%s*"run_id"[^}]*"v"%s*:%s*"([^"]+)"'
        
        -- Try to match the full JSON object first
        local extracted_id = message:match(json_pattern)
        
        -- If that doesn't work, try simpler pattern
        if not extracted_id then
            extracted_id = message:match(simple_pattern)
        end
        
        -- If still not found, try line by line for multiline JSON
        if not extracted_id then
            local lines = {}
            for line in message:gmatch("[^\r\n]+") do
                table.insert(lines, line:gsub("^%s+", ""):gsub("%s+$", ""))
            end
            
            local combined = table.concat(lines, "")
            extracted_id = combined:match('"k"%s*:%s*"run_id"[^}]*"v"%s*:%s*"([^"]+)"')
        end
        
        if extracted_id then
            run_id = extracted_id
        end
    end
    
    -- Set the run_id field for use in log stream name
    record["run_id"] = run_id
    return 1, timestamp, record
end




[PARSER]
    Name        github_worker
    Format      regex
    Regex       ^\[(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})z (?<level>\w+)(?<source>[^\]]*)\](?<message>.*)
    Time_Key    time
    Time_Format %Y-%m-%d %H:%M:%S
    Time_Keep   On

[MULTILINE_PARSER]
    name          github_worker_multiline
    type          regex
    flush_timeout 1000
    # Rule for start_state: matches lines beginning with [YYYY-MM-DD HH:MM:SSz LEVEL]
    rule          "start_state"   "^\[[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}z [A-Z]+\]"  "cont"
    # Rule for continuation: continue until we see another timestamp pattern
    rule          "cont"          "^(?!\[[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}z [A-Z]+\])"  "cont"

[MULTILINE_PARSER]
    name          github_worker_multiline
    type          regex
    flush_timeout 1000
    rule          "start_state"  "^\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}z \w+[^\]]*\]"  "cont"
    rule          "cont"         "^(?!\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}z \w+[^\]]*\])"  "cont"
