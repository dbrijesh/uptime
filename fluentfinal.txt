-- Track state per log file
if not files_state then
    files_state = {}
end

function extract_run_id_from_log(tag, ts, record)
    -- Always ensure record is a table
    if type(record) ~= "table" then
        print("❌ [DEBUG] Invalid record, got type:", type(record))
        return 1, ts, record
    end

    -- Scope state per file
    local fname = record["filename"] or "default"
    local state = files_state[fname] or { run_id = "unknown", found = false, expecting_value = false }
    files_state[fname] = state

    record["run_id"] = state.run_id

    print("🔎 [DEBUG] Processing file:", fname)
    print("🔎 [DEBUG] Current run_id state:", state.run_id, " found:", tostring(state.found), " expecting_value:", tostring(state.expecting_value))

    -- If already found, just retag
    if state.found then
        local new_tag = "github.runner." .. tostring(state.run_id)
        print("🔎 [DEBUG] Already found run_id -> tagging record with:", new_tag)
        return 2, ts, record  -- Return 2 to indicate tag change, but don't return new_tag here
    end

    -- Extract current line
    local content = record["log"] or record["message"] or ""
    if type(content) ~= "string" then
        content = tostring(content)
    end
    local line = content:gsub("^%s+", ""):gsub("%s+$", ""):gsub(",$", "")

    print("🔎 [DEBUG] Raw line from log:", line)

    if line == "" then
        print("⚠️ [DEBUG] Empty line, skipping")
        return 1, ts, record
    end

    -- If expecting value (after "k": "run_id")
    if state.expecting_value then
        print("🔎 [DEBUG] Expecting run_id value in file:", fname)
        local value = line:match('"v"%s*:%s*"([^"]+)"')
                  or line:match('"v":%s*"([^"]+)"')
                  or line:match('"v"%s*:%s*\'([^\']+)\'')
                  or line:match('"v":%s*\'([^\']+)\'')
        if value then
            state.run_id = value
            state.found = true
            state.expecting_value = false
            record["run_id"] = value
            local new_tag = "github.runner." .. tostring(value)
            print("✅ [DEBUG] Extracted run_id from", fname, "->", value)
            -- Change the tag for this record
            return 2, new_tag, ts, record
        else
            print("⚠️ [DEBUG] No value found after run_id key in file:", fname)
        end
        state.expecting_value = false
    else
        -- Look for "k": "run_id"
        if line:match('"k"%s*:%s*"run_id"')
        or line:match('"k":%s*"run_id"')
        or line:match('"k"%s*:%s*\'run_id\'')
        or line:match('"k":%s*\'run_id\'') then
            state.expecting_value = true
            print("📍 [DEBUG] Found run_id key in", fname, "- will extract value on next line")
        else
            print("🔎 [DEBUG] No run_id key in this line for file:", fname)
        end
    end

    return 1, ts, record
end


[INPUT]
    Name              tail
    Path              /home/runner/_diag/Worker_*.log
    Tag               github.runner
    Refresh_Interval  5
    Read_from_Head    false
    Skip_Long_Lines   off
    Skip_Empty_Lines  on
    # Add these lines to capture filename
    Path_Key          filename
    # Optional: Use Tag_Regex to extract just the Worker name
    Tag_Regex         ^.*\/(Worker_[^\/]+)\.log$

# Add a filter to ensure filename is set properly
[FILTER]
    Name                record_modifier
    Match               github.runner
    Record              hostname ${HOSTNAME}
    # This will set filename from the Path_Key if not already set

[FILTER]
    Name    lua
    Match   github.runner
    Script  /etc/fluent-bit/extract_run_id.lua
    Call    extract_run_id_from_log










Track state per log file
if not files_state then
    files_state = {}
end

function extract_run_id_from_log(tag, ts, record)
    -- Always ensure record is a table
    if type(record) ~= "table" then
        print("❌ [DEBUG] Invalid record, got type:", type(record))
        return 1, ts, record
    end

    -- Scope state per file
    local fname = record["filename"] or "default"
    local state = files_state[fname] or { run_id = "unknown", found = false, expecting_value = false }
    files_state[fname] = state

    record["run_id"] = state.run_id

    print("🔎 [DEBUG] Processing file:", fname)
    print("🔎 [DEBUG] Current run_id state:", state.run_id, " found:", tostring(state.found), " expecting_value:", tostring(state.expecting_value))

    -- If already found, just retag
    if state.found then
        local new_tag = "github.runner." .. tostring(state.run_id)
        print("🔎 [DEBUG] Already found run_id -> tagging record with:", new_tag)
        return 2, ts, record  -- Return 2 to indicate tag change, but don't return new_tag here
    end

    -- Extract current line
    local content = record["log"] or record["message"] or ""
    if type(content) ~= "string" then
        content = tostring(content)
    end
    local line = content:gsub("^%s+", ""):gsub("%s+$", ""):gsub(",$", "")

    print("🔎 [DEBUG] Raw line from log:", line)

    if line == "" then
        print("⚠️ [DEBUG] Empty line, skipping")
        return 1, ts, record
    end

    -- If expecting value (after "k": "run_id")
    if state.expecting_value then
        print("🔎 [DEBUG] Expecting run_id value in file:", fname)
        local value = line:match('"v"%s*:%s*"([^"]+)"')
                  or line:match('"v":%s*"([^"]+)"')
                  or line:match('"v"%s*:%s*\'([^\']+)\'')
                  or line:match('"v":%s*\'([^\']+)\'')
        if value then
            state.run_id = value
            state.found = true
            state.expecting_value = false
            record["run_id"] = value
            local new_tag = "github.runner." .. tostring(value)
            print("✅ [DEBUG] Extracted run_id from", fname, "->", value)
            -- Change the tag for this record
            return 2, new_tag, ts, record
        else
            print("⚠️ [DEBUG] No value found after run_id key in file:", fname)
        end
        state.expecting_value = false
    else
        -- Look for "k": "run_id"
        if line:match('"k"%s*:%s*"run_id"')
        or line:match('"k":%s*"run_id"')
        or line:match('"k"%s*:%s*\'run_id\'')
        or line:match('"k":%s*\'run_id\'') then
            state.expecting_value = true
            print("📍 [DEBUG] Found run_id key in", fname, "- will extract value on next line")
        else
            print("🔎 [DEBUG] No run_id key in this line for file:", fname)
        end
    end

    return 1, ts, record
end


-- Track state per log file
if not files_state then
    files_state = {}
end

function extract_run_id_from_log(tag, ts, record)
    -- Always ensure record is a table
    if type(record) ~= "table" then
        print("❌ [DEBUG] Invalid record, got type:", type(record))
        return -1, ts, {}
    end

    -- Scope state per file
    local fname = record["filename"] or "default"
    local state = files_state[fname] or { run_id = "unknown", found = false, expecting_value = false }
    files_state[fname] = state

    record["run_id"] = state.run_id

    print("🔎 [DEBUG] Processing file:", fname)
    print("🔎 [DEBUG] Current run_id state:", state.run_id, " found:", tostring(state.found), " expecting_value:", tostring(state.expecting_value))

    -- If already found, just retag
    if state.found then
        local new_tag = "github.runner." .. tostring(state.run_id)
        print("🔎 [DEBUG] Already found run_id -> tagging record with:", new_tag)
        return 2, ts, new_tag, record
    end

    -- Extract current line
    local content = record["log"] or record["message"] or ""
    if type(content) ~= "string" then
        content = tostring(content)
    end
    local line = content:gsub("^%s+", ""):gsub("%s+$", ""):gsub(",$", "")

    print("🔎 [DEBUG] Raw line from log:", line)

    if line == "" then
        print("⚠️ [DEBUG] Empty line, skipping")
        return 1, ts, record
    end

    -- If expecting value (after "k": "run_id")
    if state.expecting_value then
        print("🔎 [DEBUG] Expecting run_id value in file:", fname)
        local value = line:match('"v"%s*:%s*"([^"]+)"')
                  or line:match('"v":%s*"([^"]+)"')
                  or line:match('"v"%s*:%s*\'([^\']+)\'')
                  or line:match('"v":%s*\'([^\']+)\'')
        if value then
            state.run_id = value
            state.found = true
            state.expecting_value = false
            record["run_id"] = value
            local new_tag = "github.runner." .. tostring(value)
            print("✅ [DEBUG] Extracted run_id from", fname, "->", value)
            return 2, ts, new_tag, record
        else
            print("⚠️ [DEBUG] No value found after run_id key in file:", fname)
        end
        state.expecting_value = false
    else
        -- Look for "k": "run_id"
        if line:match('"k"%s*:%s*"run_id"')
        or line:match('"k":%s*"run_id"')
        or line:match('"k"%s*:%s*\'run_id\'')
        or line:match('"k":%s*\'run_id\'') then
            state.expecting_value = true
            print("📍 [DEBUG] Found run_id key in", fname, "- will extract value on next line")
        else
            print("🔎 [DEBUG] No run_id key in this line for file:", fname)
        end
    end

    return 1, ts, record
end



-- Track state per log file
if not files_state then
    files_state = {}
end

function extract_run_id_from_log(tag, ts, record)
    if not record then
        record = {}
    end

    -- Get filename to scope state
    local fname = record["filename"] or "default"
    local state = files_state[fname] or { run_id = "unknown", found = false, expecting_value = false }
    files_state[fname] = state

    -- Always attach current run_id
    record["run_id"] = state.run_id

    -- Debug: incoming info
    print("🔎 [DEBUG] Processing file:", fname)
    print("🔎 [DEBUG] Current run_id state:", state.run_id, " found:", tostring(state.found), " expecting_value:", tostring(state.expecting_value))

    -- If already found, just retag
    if state.found then
        local new_tag = "github.runner." .. state.run_id
        print("🔎 [DEBUG] Already found run_id -> tagging record with:", new_tag)
        return 2, ts, new_tag, record
    end

    -- Extract current line
    local content = record["log"] or record["message"] or ""
    if type(content) ~= "string" then
        content = tostring(content)
    end
    local line = content:gsub("^%s+", ""):gsub("%s+$", ""):gsub(",$", "")

    print("🔎 [DEBUG] Raw line from log:", line)

    if line == "" then
        print("⚠️ [DEBUG] Empty line, skipping")
        return 1, ts, record
    end

    -- If expecting value (after "k": "run_id")
    if state.expecting_value then
        print("🔎 [DEBUG] Expecting run_id value in file:", fname)
        local value = line:match('"v"%s*:%s*"([^"]+)"')
                  or line:match('"v":%s*"([^"]+)"')
                  or line:match('"v"%s*:%s*\'([^\']+)\'')
                  or line:match('"v":%s*\'([^\']+)\'')
        if value then
            state.run_id = value
            state.found = true
            state.expecting_value = false
            record["run_id"] = value
            local new_tag = "github.runner." .. value
            print("✅ [DEBUG] Extracted run_id from", fname, "->", value)
            return 2, ts, new_tag, record
        else
            print("⚠️ [DEBUG] No value found after run_id key in file:", fname)
        end
        state.expecting_value = false
    else
        -- Look for "k": "run_id"
        if line:match('"k"%s*:%s*"run_id"')
        or line:match('"k":%s*"run_id"')
        or line:match('"k"%s*:%s*\'run_id\'')
        or line:match('"k":%s*\'run_id\'') then
            state.expecting_value = true
            print("📍 [DEBUG] Found run_id key in", fname, "- will extract value on next line")
        else
            print("🔎 [DEBUG] No run_id key in this line for file:", fname)
        end
    end

    return 1, ts, record
end



[SERVICE]
    Flush         1
    Log_Level     info
    Daemon        off
    Parsers_File  /etc/fluent-bit/parsers.conf

[INPUT]
    Name              tail
    Path              /home/runner/_diag/Worker_*.log
    Tag               github.runner
    Path_Key          filename              # capture filename for per-file state
    Refresh_Interval  5
    Read_from_Head    false
    Skip_Long_Lines   off
    Skip_Empty_Lines  on

[FILTER]
    Name    lua
    Match   github.runner
    Script  /etc/fluent-bit/extract_run_id.lua
    Call    extract_run_id_from_log

# Debug filter to confirm run_id is set
[FILTER]
    Name    record_modifier
    Match   github.runner.*
    Record  debug_extraction true

[OUTPUT]
    Name                cloudwatch_logs
    Match               github.runner.*
    region              us-east-1
    log_group_name      /github-actions/runners
    log_stream_prefix   runner-
    auto_create_group   true
    auto_create_stream  true
    log_retention_days  7




-----------


-- State table for each log file
if not files_state then
    files_state = {}
end

function extract_run_id_from_log(tag, ts, record)
    -- Track state per log file
    local fname = record["filename"] or "default"
    local state = files_state[fname] or { run_id = "unknown", found = false, expecting_value = false }
    files_state[fname] = state

    -- Always attach current run_id to the record
    record["run_id"] = state.run_id

    -- If run_id already found for this file, just retag and return
    if state.found then
        local new_tag = "github.runner." .. state.run_id
        return 2, ts, new_tag, record
    end

    -- Clean up the log line
    local content = record["log"] or record["message"] or ""
    local line = content:gsub("^%s+", ""):gsub("%s+$", ""):gsub(",$", "")

    if not line or line == "" then
        return 1, ts, record
    end

    -- If we saw "k": "run_id" previously, expect value now
    if state.expecting_value then
        local value = line:match('"v"%s*:%s*"([^"]+)"')
                  or line:match('"v":%s*"([^"]+)"')
                  or line:match('"v"%s*:%s*\'([^\']+)\'')
                  or line:match('"v":%s*\'([^\']+)\'')
        if value then
            state.run_id = value
            state.found = true
            state.expecting_value = false
            record["run_id"] = value
            local new_tag = "github.runner." .. value
            print("✅ Extracted run_id from " .. fname .. ": " .. value)
            return 2, ts, new_tag, record
        end
        state.expecting_value = false

    else
        -- Look for "k": "run_id"
        if line:match('"k"%s*:%s*"run_id"')
        or line:match('"k":%s*"run_id"')
        or line:match('"k"%s*:%s*\'run_id\'')
        or line:match('"k":%s*\'run_id\'') then
            state.expecting_value = true
            print("📍 Found run_id key in " .. fname .. ", waiting for value")
        end
    end

    return 1, ts, record
end
